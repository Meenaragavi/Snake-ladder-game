{"version":3,"file":"static/js/main.223baa3d.js","mappings":"yBAAA,SAASA,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,ICLlD,IAAMO,EAASC,GAAGC,QAAQ,yBAC1BF,EAAOG,KAAK,UAEZ,IAEIC,EAFAC,EAAU,GAGVC,EAASC,SAASC,eAAe,UAErCF,EAAOG,MAAgD,GAAxCF,SAASG,gBAAgBC,aAExCL,EAAOM,OAAiD,GAAxCL,SAASG,gBAAgBC,aACzC,IAAIE,EAAMP,EAAOQ,WAAW,MAOtBC,EAAOT,EAAOG,MAAQ,GAEtBO,EAAUD,EAAO,EAEjBE,EAAUF,EAAO,EAAI,GACrBG,EAAS,CAVK,0BACC,2BACE,6BACD,6BAShBC,EAAU,CACd,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,KAGDC,EAAS,CACb,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,KAGDC,EAAAA,WACJ,WAAYC,EAAIC,EAAMC,EAAKC,IChDd,SAAyBC,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCD8CW,SAC/BC,KAAKP,GAAKA,EACVO,KAAKN,KAAOA,EACZM,KAAKL,IAAMA,EACXK,KAAKJ,IAAMA,ED1CA,IAAsBE,EAAaG,EAAYC,EC+E3D,OD/EkCJ,EC2ClC,GD3C+CG,EC2C/C,mBACD,WACE,IAAIE,EACFC,KAAKC,MAAML,KAAKL,IAAM,IAAM,GAAK,EAC5BK,KAAKL,IAAM,GAAMT,EAAO,GAAKC,EAC9BV,EAAOG,OAAUoB,KAAKL,IAAM,GAAMT,EAAOC,EAAU,IACrDmB,EAAO7B,EAAOM,QAAUqB,KAAKC,MAAML,KAAKL,IAAM,IAAMT,EAAOE,GAE3DmB,EAAQ,IAAIC,MAChBD,EAAME,IAAMT,KAAKJ,IACjBZ,EAAI0B,UAAUH,EAAOJ,EAAMG,EAAM,GAAI,M,uBAGvC,SAAUK,GACJX,KAAKL,IAAMgB,GAAO,KACpBX,KAAKL,KAAOgB,EACZX,KAAKL,IAAMK,KAAKY,gBAAgBZ,KAAKL,IAAM,GAAK,KAEnD,6BACD,SAAgBA,GAEd,IADA,IAAIkB,EAASlB,EACJjC,EAAI,EAAGA,EAAI4B,EAAQ3B,OAAQD,IAClC,GAAI4B,EAAQ5B,GAAG,IAAMiC,EAAK,CACxBkB,EAASvB,EAAQ5B,GAAG,GACpB,MAIJ,IAAK,IAAIA,EAAI,EAAGA,EAAI6B,EAAO5B,OAAQD,IACjC,GAAI6B,EAAO7B,GAAG,IAAMiC,EAAK,CACvBkB,EAAStB,EAAO7B,GAAG,GACnB,MAIJ,OAAOmD,OD7EOtD,EAAkBuC,EAAYgB,UAAWb,GACrDC,GAAa3C,EAAkBuC,EAAaI,GAChDlC,OAAOC,eAAe6B,EAAa,YAAa,CAC9C/B,UAAU,IC2EX,EA1CGyB,GAsEN,SAASuB,IACP/B,EAAIgC,UAAU,EAAG,EAAGvC,EAAOG,MAAOH,EAAOM,QAEzCP,EAAQyC,SAAQ,SAACC,GACfA,EAAOC,UA7BXzC,SAASC,eAAe,aAAayC,iBAAiB,SAAS,WAC7D,IAAM1B,EAAOhB,SAASC,eAAe,QAAQ0C,MAC7C3C,SAASC,eAAe,QAAQ2C,UAAW,EAC3C5C,SAASC,eAAe,aAAa4C,QAAS,EAC9C7C,SAASC,eAAe,eAAe4C,QAAS,EAChDhD,EAAgB,IAAIiB,EAAOhB,EAAQb,OAAQ+B,EAAM,EAAGL,EAAOb,EAAQb,SACnEe,SAASC,eACP,kBACA6C,UAFF,yBAGArD,EAAOG,KAAK,OAAQC,MAGtBG,SAASC,eAAe,eAAeyC,iBAAiB,SAAS,WAC/D,IAAMT,EASSP,KAAKqB,KAAqB,EAAhBrB,KAAKsB,UAR9BnD,EAAcoD,UAAUhB,GACxBxC,EAAOG,KAAK,WAAY,CACtBqC,IAAKA,EACLlB,GAAIlB,EAAckB,GAClBE,IAAKpB,EAAcoB,SAevBxB,EAAOyD,GAAG,QAAQ,SAACC,GACjBrD,EAAQsD,KAAK,IAAItC,EAAOhB,EAAQb,OAAQkE,EAAKnC,KAAMmC,EAAKlC,IAAKkC,EAAKjC,MAClEmB,IACArC,SAASC,eACP,iBACA6C,WAFF,kBAE0BK,EAAKnC,KAF/B,6BAEwDmC,EAAKjC,IAF7D,qCAKFzB,EAAOyD,GAAG,UAAU,SAACC,GACnBA,EAAKZ,SAAQ,SAACC,EAAQa,GACpBvD,EAAQsD,KAAK,IAAItC,EAAOuC,EAAOb,EAAOxB,KAAMwB,EAAOvB,IAAKuB,EAAOtB,MAC/DoC,QAAQC,IAAIf,GACZxC,SAASC,eACP,iBACA6C,WAFF,kBAE0BN,EAAOxB,KAFjC,6BAE0DwB,EAAOtB,IAFjE,kBAIFmB,OAEF5C,EAAOyD,GAAG,YAAY,SAACC,EAAMK,GAe3B,IAAIC,EAdJ3D,EAAQqD,EAAKpC,IAAIkC,UAAUE,EAAKlB,KAChCjC,SAASC,eAAe,QAAQ8B,IAAhC,4BAA2DoB,EAAKlB,IAAhE,QACAI,IACImB,GAAQ3D,EAAckB,IACxBf,SAASC,eAAe,eAAe4C,QAAS,EAChD7C,SAASC,eACP,kBACA6C,UAFF,kBAEyBhD,EAAQ0D,GAAMxC,KAFvC,iBAIAhB,SAASC,eAAe,eAAe4C,QAAS,EAChD7C,SAASC,eACP,kBACA6C,UAFF,yBAKF,IAAK,IAAI9D,EAAI,EAAGA,EAAIc,EAAQb,OAAQD,IAClC,GAAsB,IAAlBc,EAAQd,GAAGiC,IAAW,CACxBwC,EAAS3D,EAAQd,GACjB,MAGAyE,IACFzD,SAASC,eACP,kBACA6C,UAFF,aAEoBW,EAAOzC,KAF3B,iBAGAhB,SAASC,eAAe,eAAe4C,QAAS,EAChD7C,SAASC,eAAe,QAAQ4C,QAAS,EACzC7C,SAASC,eAAe,eAAe4C,QAAS,MAIpD7C,SAASC,eAAe,eAAeyC,iBAAiB,SAAS,WAC/DjD,EAAOG,KAAK,cAGdH,EAAOyD,GAAG,WAAW,WACnBQ,OAAOC,SAASC,Y","sources":["../javascript/esm|C:/Users/ragav/node_modules/@babel/runtime/helpers/esm/createClass.js","index.js","../javascript/esm|C:/Users/ragav/node_modules/@babel/runtime/helpers/esm/classCallCheck.js"],"sourcesContent":["function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","// Making Connection \nconst socket = io.connect(\"http://localhost:3000\");\nsocket.emit(\"joined\");\n//This let all players in the game\nlet players = [];\n// This is the  object for individual players\nlet currentPlayer; \nlet canvas = document.getElementById(\"canvas\");\n//adjust the width of the canvas\ncanvas.width = document.documentElement.clientHeight * 0.9;\n//adjust the height of the canvas\ncanvas.height = document.documentElement.clientHeight * 0.9;\nlet ctx = canvas.getContext(\"2d\");\n//assign images link to const variables \nconst redPieceImg = \"../images/red_piece.png\";\nconst bluePieceImg = \"../images/blue_piece.png\";\nconst yellowPieceImg = \"../images/yellow_piece.png\";\nconst greenPieceImg = \"../images/green_piece.png\";\n//set side equals to width by 10\nconst side = canvas.width / 10;\n//set offsetX equals to side by 2\nconst offsetX = side / 2;\n//set offsetY equals to side by 2 and add 20 to it\nconst offsetY = side / 2 + 20;\nconst images = [redPieceImg, bluePieceImg, yellowPieceImg, greenPieceImg];\n//create a class for ladders\nconst ladders = [\n  [2, 23],\n  [4, 68],\n  [6, 45],\n  [20, 59],\n  [30, 96],\n  [52, 72],\n  [57, 96],\n  [71, 92],\n];\n// create a class for snakes\nconst snakes = [\n  [98, 40],\n  [84, 58],\n  [87, 49],\n  [73, 15],\n  [56, 8],\n  [50, 5],\n  [43, 17],\n];\n//create a class for players\nclass Player {\n  constructor(id, name, pos, img) {\n    this.id = id;\n    this.name = name;\n    this.pos = pos;\n    this.img = img;\n  }\n  draw() {\n    let xPos =\n      Math.floor(this.pos / 10) % 2 == 0\n        ? (this.pos % 10) * side - 15 + offsetX\n        : canvas.width - ((this.pos % 10) * side + offsetX + 15);\n    let yPos = canvas.height - (Math.floor(this.pos / 10) * side + offsetY);\n\n    let image = new Image();\n    image.src = this.img;\n    ctx.drawImage(image, xPos, yPos, 30, 40);\n  }\n//update the position of the number\n  updatePos(num) {\n    if (this.pos + num <= 99) {\n      this.pos += num;\n      this.pos = this.isLadderOrSnake(this.pos + 1) - 1;\n    }\n  }\n  isLadderOrSnake(pos) {\n    let newPos = pos;\n    for (let i = 0; i < ladders.length; i++) {\n      if (ladders[i][0] == pos) {\n        newPos = ladders[i][1];\n        break;\n      }\n    }\n\n    for (let i = 0; i < snakes.length; i++) {\n      if (snakes[i][0] == pos) {\n        newPos = snakes[i][1];\n        break;\n      }\n    }\n\n    return newPos;\n  }\n}\n\ndocument.getElementById(\"start-btn\").addEventListener(\"click\", () => {\n  const name = document.getElementById(\"name\").value;\n  document.getElementById(\"name\").disabled = true;\n  document.getElementById(\"start-btn\").hidden = true;\n  document.getElementById(\"roll-button\").hidden = false;\n  currentPlayer = new Player(players.length, name, 0, images[players.length]);\n  document.getElementById(\n    \"current-player\"\n  ).innerHTML = `<p>Anyone can roll</p>`;\n  socket.emit(\"join\", currentPlayer);\n});\n\ndocument.getElementById(\"roll-button\").addEventListener(\"click\", () => {\n  const num = rollDice();\n  currentPlayer.updatePos(num);\n  socket.emit(\"rollDice\", {\n    num: num,\n    id: currentPlayer.id,\n    pos: currentPlayer.pos,\n  });\n});\nfunction rollDice() {\n  const number = Math.ceil(Math.random() * 6);\n  return number;\n}\nfunction drawPins() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  players.forEach((player) => {\n    player.draw();\n  });\n}\n// Listen for events\nsocket.on(\"join\", (data) => {\n  players.push(new Player(players.length, data.name, data.pos, data.img));\n  drawPins();\n  document.getElementById(\n    \"players-table\"\n  ).innerHTML += `<tr><td>${data.name}</td><td><img src=${data.img} height=50 width=40></td></tr>`;\n});\n\nsocket.on(\"joined\", (data) => {\n  data.forEach((player, index) => {\n    players.push(new Player(index, player.name, player.pos, player.img));\n    console.log(player);\n    document.getElementById(\n      \"players-table\"\n    ).innerHTML += `<tr><td>${player.name}</td><td><img src=${player.img}></td></tr>`;\n  });\n  drawPins();\n});\nsocket.on(\"rollDice\", (data, turn) => {\n  players[data.id].updatePos(data.num);\n  document.getElementById(\"dice\").src = `./images/dice/dice${data.num}.png`;\n  drawPins();\n  if (turn != currentPlayer.id) {\n    document.getElementById(\"roll-button\").hidden = true;\n    document.getElementById(\n      \"current-player\"\n    ).innerHTML = `<p>It's ${players[turn].name}'s turn</p>`;\n  } else {\n    document.getElementById(\"roll-button\").hidden = false;\n    document.getElementById(\n      \"current-player\"\n    ).innerHTML = `<p>It's your turn</p>`;\n  }\n  let winner;\n  for (let i = 0; i < players.length; i++) {\n    if (players[i].pos == 99) {\n      winner = players[i];\n      break;\n    }\n  }\n  if (winner) {\n    document.getElementById(\n      \"current-player\"\n    ).innerHTML = `<p>${winner.name} has won!</p>`;\n    document.getElementById(\"roll-button\").hidden = true;\n    document.getElementById(\"dice\").hidden = true;\n    document.getElementById(\"restart-btn\").hidden = false;\n  }\n});\n// Logic to restart the game\ndocument.getElementById(\"restart-btn\").addEventListener(\"click\", () => {\n  socket.emit(\"restart\");\n});\n\nsocket.on(\"restart\", () => {\n  window.location.reload();\n});\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","socket","io","connect","emit","currentPlayer","players","canvas","document","getElementById","width","documentElement","clientHeight","height","ctx","getContext","side","offsetX","offsetY","images","ladders","snakes","Player","id","name","pos","img","instance","Constructor","TypeError","this","protoProps","staticProps","xPos","Math","floor","yPos","image","Image","src","drawImage","num","isLadderOrSnake","newPos","prototype","drawPins","clearRect","forEach","player","draw","addEventListener","value","disabled","hidden","innerHTML","ceil","random","updatePos","on","data","push","index","console","log","turn","winner","window","location","reload"],"sourceRoot":""}